//-------------------------------------------------------------dependencies og setup------------------------------------------------------------------------------------------------------------
if (process.env.NODE_ENV !== "production") {
    require("dotenv").config()
}
https: //api.themoviedb.org/3/movie/550?api_key=1d062a48bc373e1fcc6cd68bcee3c72d 
;
const Authorization = "curl --request GET \
--url 'https://api.themoviedb.org/3/movie/76341' \
--header 'Authorization: Bearer <<access_token>>' \
--header 'Content-Type: application/json;charset=utf-8'"
const express = require("express")
const app = express()
const bcrypt = require("bcrypt")
const passport = require("passport")
const flash = require("express-flash")
const session = require("express-session")
const methodOverride = require("method-override")
const request = require("request")
const mdb = require('moviedb')('1d062a48bc373e1fcc6cd68bcee3c72d');
const bildeLink = "https://image.tmdb.org/t/p/"
const ejs = require("ejs")
const mysql = require("mysql")
const db = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "root",
    database: "film_project"
})
var nodemailer = require('nodemailer');

const initializePassport = require("./passport-config")
const { use } = require("passport")
initializePassport(
    passport,
    email => users.find(user => user.email === email),
    id => users.find(user => user.id === id)
)

const users = []
//dependencies og config til express
app.set("view-engine", "ejs")
app.use(express.urlencoded({ extended: false }))
app.use("/public", express.static("public"))
app.use(express.static(__dirname + '/public' + "/assets"));
app.use('/images', express.static(__dirname+'/img/'));// you can access image using this url: http://localhost:7000/images/abc.jpg
app.use('/style', express.static(__dirname+'/css' ));
app.use(flash())
app.use(session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false
}))
app.use(passport.initialize())
app.use(passport.session())
app.use(methodOverride("_method"))
app.use('/scripts', express.static(__dirname + '/scripts'));

/* vet ikke hva denne gjør ant en å eksportere navn email osv */
app.get('/', checkAuthenticated, (req, res) => {
    res.render('index.ejs', { name: req.user.name })
})

app.get("/login", checkNotAutheticated, (req, res) => {
    res.render("login.ejs")
})
console.log(users)
app.post("/login", checkNotAutheticated, passport.authenticate("local", {
    successRedirect: "/",
    failureRedirect: "/login",
    failureFlash: true,

}))

app.get("/register", checkNotAutheticated, (req, res) => {
    res.render("register.ejs")
})
db.connect(function(err) {
    if (err) throw err;
    console.log("Connected!") 
})

//henter alle brukere
 db.query("SELECT * FROM user", function(err, result, fields) {
                if (err) throw err;
                console.log(result);
      
    /*Kunne sikkert vert en for each men aner ikkje hvordan eg bruker den, denne looper like mage ganger som det er database rekker*/ 
      var i;
for (i = 0; i < result.length; i++) {
  /* pusher til users(folk som kan logge seg inn) data fra databasen. hver gang på oppstart lagrer alle brukere til server */
    users.push({
        id: result[i].idUser,
        name: result[i].Username,
        email: result[i].Email,
        password: result[i].password
            
        });

}
})
//få hentet inn Film tidlig for å ungå å ikkje loade apiet for sent
loadTMDB()
//repetere oppdatere api hver 24 time
var dayInMilliseconds = 1000 * 60 * 60 * 24;
setInterval(function() { loadTMDB(); },dayInMilliseconds );
//setTimeout(function() { loadTMDB(); }, 5000);

function loadTMDB(){
    mdb.discoverMovie({ query: 'Movie' }, (err, res) => {
        let tilfeldig_tall = Math.floor(Math.random() * 20);
        //den i midten er størelse som kan være "w92","w154","w185","w342","w500","w780","original"
        globalThis.Film1 = bildeLink + "w154" +res.results[tilfeldig_tall].poster_path
        globalThis.Populert = res.results
        console.log("TMDB loaded")
    })
}


//---------------------------------------------------------------------------------kode for registrering----------------------------------------------------------------------------------------

/*registrering og lagring av brukere i databasen*/
app.post("/register", checkNotAutheticated, async(req, res) => {

    try {
        const hashedPassword = await bcrypt.hash(req.body.password, 10)
        users.push({
            id: Date.now().toString(),
            name: req.body.name,
            email: req.body.email,
            password: hashedPassword
        })
        
        const brukerNavn = req.body.name
        const passord = hashedPassword
        const mail = req.body.email
   
            var sql = "INSERT INTO user (username, password , Email) VALUES ('" + brukerNavn + "','" + passord + "', '" + mail + "')";
            db.query(sql, function(err, result) {
                if (err) throw err;
                console.log("1 record inserted");
            });
            db.query("SELECT * FROM user", function(err, result, fields) {
                if (err) throw err;
                console.log(result)
            });
     
        res.redirect("/login")
    } catch {
        res.redirect("/register")
    }

})

app.delete("/logout", (req, res) => {
    req.logOut()
    res.redirect("/login")
})

function checkAuthenticated(req, res, next) {
    if (req.isAuthenticated()) {
        return next()
    }
    res.redirect("/login")
}

function checkNotAutheticated(req, res, next) {
    if (req.isAuthenticated()) {
        res.redirect("/")
    }
    next()
}

//Lage tilfeldig kode
function makeid(length) {
    var result           = '';
    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for ( var i = 0; i < length; i++ ) {
       result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
 }




//Legger til en bruker i databasen
app.get("/", (req, res) => {
    let post = { name: req.body.name, password: hashedPassword, email: req.body.email }
    let sql = "INSERT INTO user SET ?"
    let query = db.query(sql, post, err => {
        if (err) {
            throw err
        }
        res.send("added")
    })
})


//---------------------------------------------------------------kode for å legge til serier-----------------------------------------------------------------------------------------------------------
/*laster opp data til databasen og sender info til form*/
//tåler sql injections som ikke er baser på multiple sql statements. Den krasjer vis du prøver å injecte noe som ikke er inne i den ene komanden som sendes. Kan altså ikke ";drop table" til og med om du fikser syntax på begge sider av koden
//Burde byttes til en som ikke craasher serveren pga syntax, men dataene er trygge
app.post("/createSerie", checkAuthenticated, (req, res) => {
    let cUser = req.user.id;
    let sNavn = req.body.serieNavn;
    var sEpisode = req.body.serieEpisode;
    var sMinutt = req.body.serieMinutt;
    var sSesong = req.body.serieSesong;
    if (sSesong == ""){ var sSesong = 0}
    if (sEpisode == ""){ var sEpisode = 0}
    if (sMinutt == ""){var sMinutt = 0}
    let post = { Serie_navn: req.body.serieNavn, Serie_episode: req.body.serieEpisode, Serie_minutt: req.body.serieMinutt, Serie_Sesong: req.body.serieSesong }
    //Pga values kan man ikke insert into (table..) SELECT verdier.. from
    let sql = `INSERT INTO film_project.serie (Serie_navn, Serie_episode, Serie_sesong, Serie_minutt, user_userID) VALUES ('${sNavn}', '${sEpisode}','${sSesong}','${sMinutt}','${cUser}');`
    console.log(sql)
    let query = db.query(sql, post, err => {
        if (err) {
            throw err
        }


    })
    res.render("createSerie.ejs", { serieNavn: req.body.serieNavn, name: req.user.name, serieEpisode: req.body.serieEpisode, serieMinutt: req.body.serieMinutt, serieSesong: req.body.serieSesong, PopulerFilm: Film1 })
});
/* går til create serie siden*/
app.post("/createSeries", checkAuthenticated, (req, res) => {
    

    res.render("createSerie.ejs", { serieNavn: req.body.serieNavn, name: req.user.name, serieEpisode: req.body.serieEpisode, serieMinutt: req.body.serieMinutt, serieSesong: req.body.serieSesong , PopulerFilm: Film1})
});
//----------------------------------------------------------------kode for å se sine serier---------------------------------------------------------------------------------------------
app.post("/minSerie", checkAuthenticated, (req, res) =>{
    let currentUser = req.user.id
    sql = ` SELECT * FROM film_project.serie where user_userID = ${currentUser}`
    db.query(sql, function(err, results){
        if (err){ 
          throw err;
        } 
const data = results
res.render("list.ejs", { userData : data})

//-----------------------------------------------------------------------kode for å slette--------------------------------------------------------------------------------------
//når Delete blirr kalt vil serveren mota hvilken delete knapp som ble klikket og sletter den fra databasen
app.post("/Delete", checkAuthenticated, (req, res) =>{
    let currentUser = req.user.id
    let Deleterow = req.body.Hidden
    //lage et object ut av deleterow for sikkerhet unngå sql injections
    sql = `DELETE from serie WHERE user_userID = ? AND idSerie = ?`
    db.query(sql, [currentUser, Deleterow], (error, results, fields) => {
        if (error)
          return console.error(error.message);
      
        console.log('Deleted Row(s):', results.affectedRows);
      });
    res.render("list.ejs", {userData: data})
})

})

});
//Oppdaterer siden. tenker denne er lur for at man skal skjønne at siden må refreshes før tablet oppdaterer seg
app.post("/RefreshT", checkAuthenticated, (req, res) =>{
    res.redirect("/minSerie")
})


app.post("/Gruppe", checkAuthenticated, (req,res) => {
    res.render("Gruppe.ejs", {name: req.user.name})
})
app.post("/index_nN", checkAuthenticated, (req,res) => {
    res.render("index_noName.ejs")
})

//-----------------------------------------------------------------kode for å lage ny gruppe---------------------------------------------------------------------------------------
app.post("/nyGruppe", checkAuthenticated, (req,res) =>{
    let gruppe_navn = req.body.gNavn
    let Bruker_i_gruppe = req.user.id
    sql = `INSERT INTO film_project.gruppe (Gruppenavn,GruppeKode) VALUES ("${gruppe_navn}","${makeid(10)}");` 
    db.query(sql, function (err, result) {
        if (err) throw err;
        
      });
    sql = `INSERT INTO user_has_gruppe (user_userID) VALUES (${Bruker_i_gruppe})`
    db.query(sql, function (err, result) {
        if (err) throw err;
        
      });

    res.render("GruppeLaget.ejs")
});
//-----------------------------------------------------------------------Kode for å vise gruppeKoden------------------------------------------------------------------------------
app.post("/visKode", checkAuthenticated, (req,res) =>{
    sql = `SELECT Gruppe_idGruppe FROM user_has_gruppe WHERE user_userID = ${req.user.id}`
    db.query(sql, function (err, result) {
        if (result[0] === undefined){
res.render("ingenGruppe.ejs")
        }else{    
            if (err) throw err;
            let GruppeID = result[0].Gruppe_idGruppe;
            sql = `SELECT GruppeKode FROM gruppe WHERE idGruppe = ${GruppeID}`
            db.query(sql, function (err, result) {
                if (err) throw err;
                res.render("gruppeKode.ejs", {Kode: result[0].GruppeKode})
              });}
    
      });
    
})
//-------------------------------------------------------------------Kode for å joine Gruppe--------------------------------------------------------------------------------------
//legger person i gruppe vis koden er riktig
app.post("/bliMed", checkAuthenticated, (req,res) =>{
    sql = `SELECT * FROM gruppe`
    db.query(sql, function (err, result) {
        if (err) throw err;
        let kode = req.body.joinG
        var i;
        for (i = 0; i < result.length; i++) {
           if(kode == result[i].GruppeKode){
               sql = `INSERT INTO user_has_gruppe (Gruppe_idGruppe, user_userID) VALUES (${result[i].idGruppe}, ${req.user.id})`
               db.query(sql, function (err, result) {
                   if (err) throw err;
                   
                 });
           }
        }
  
    })
    res.render("Gruppe.ejs",{name: req.user.name})
})

//----------------------------------------------------------------Vis gruppe serier-------------------------------------------------------------------
app.post("/gSerie", checkAuthenticated, (req, res) =>{
    let currentUser = req.user.id
    sql = ` SELECT * FROM film_project.user_has_gruppe where user_userID = ${currentUser}`
    db.query(sql, function(err, results){
        if (err){ 
          throw err;
        } 



    if (results[0] != undefined){
    sql = `SELECT user_userID FROM user_has_gruppe where Gruppe_idGruppe = ${results[0].Gruppe_idGruppe}`
    db.query(sql, function(err, result){
        if (err) {throw err;}
        var people = []
        for (i = 0; i< Object.keys(result).length;i++){
            people.push(result[i].user_userID)
          
        
        }
        
//joiner navn med serie datene. Bruker koden over for å se om de er i gruppe
     sql = `SELECT user.username, serie.Serie_navn, Serie_episode, Serie_sesong, serie.Serie_minutt FROM serie INNER JOIN user ON serie.user_userID=user.idUser where idUser in (${people});`
     db.query(sql, function(err, results){
        if (err) {throw err;}
     const data = results
res.render("gSerie.ejs", { userData : data, bruker : req.user.name})
    })
    })        
    }else{
        res.render("ingenVenner.ejs")
    }

   

});
});
//------------------------------------------------------------Kode for tilfeldig film siden-----------------------------------------------------------------------------------------
app.get("/filmFinner", checkAuthenticated,(req, res)=>{
    let tall = Math.floor(Math.random() * 20);
    //størelse som kan være "w92","w154","w185","w342","w500","w780","original"
    res.render("finnFilm.ejs", {randomFilmPic: Populert[tall].poster_path  , RandomFilmId: Populert[tall].id})
})

app.get("/ToS" ,(req, res)=>{
    res.render("ToS.ejs")
})
//---------------------------------------------------------------kode for liking av filmer------------------------------------------------------------------------------------------
app.post("/Like",checkAuthenticated,(req,res)=>{
    //laste opp hvilken film du liker og vil se
    let currentUser = req.user.id
    let film_id = req.body.Hidden
    let filmPoster = req.body.bilde
    //ser om akkurat denne filmen og person eksisterer i db
    sql = `SELECT filmID, filmUser FROM film_project.liktefilmer WHERE filmID = ${film_id} AND filmUser = ${currentUser};`
    db.query(sql,function(err, results){
        //vis databasen ikkje har denne infoen : legg til
        if (results[0] == undefined){
            //posterPath er med for å unngå å bruke api for mye pga delay
    sql = `Insert Into liktefilmer (filmID, filmUser, posterPath) Values ("${film_id}", "${currentUser}", "${filmPoster}")`
    db.query(sql, function(err, result){
    if (err){ 
          throw err;
        } 
    })
 }
    })


  


    let tall = Math.floor(Math.random() * 20);
    res.render("finnFilm.ejs",{randomFilmPic: Populert[tall].poster_path  , RandomFilmId: Populert[tall].id})
})

//------------------------------------------------------Se her for match Kode--------------------------------------------------------------------------------------------------
app.post("/dineMatcher", checkAuthenticated, (req,res)=>{
    var matches = []
    //viktig å holde sql unna loops fordi js scope ikkje går gjennom da. vis denne er nederst kan den ikkje få results
        sql = `SELECT Gruppe_idGruppe FROM user_has_gruppe WHERE user_userID = ${req.user.id};`
    db.query(sql, function(err, svar){
        sql = `SELECT user_userID FROM user_has_gruppe WHERE Gruppe_idGruppe = ${svar[0].Gruppe_idGruppe};`
        db.query(sql, function(err, response){
            
    sql = `SELECT * FROM liktefilmer;`    
    db.query(sql, function(err, results){
       if (err) {throw err;}
    //repeter like mange ganger som innholdet. Hvis en film seer (i) er brukeren : se  om en av de andre ser samme film. vis de gjør det se om det er du som skal se.
    
    for ( var i = 0; i < Object.keys(results).length; i++ ) {
    if (results[i].filmUser == req.user.id){
       for ( var j = 0; j < Object.keys(results).length; j++ ) {
      
        if (results[j].filmID == results[i].filmID && results[j].filmUser != req.user.id){
            // se om brukeren er i din gruppe X

                matches.push({Bruker: req.user.id, Match: results[j].filmUser, FilmID:results[j].filmID, Poster: results[j].posterPath})
                
            
           }
           }
        }
    
    }
res.render("Matches.ejs",{matcher: matches})

})
})

    })



})
//----------------------------------------------------------------------------Mail Kode-------------------------------------------------------------------------------------------
app.post("/sendEmail",checkAuthenticated, (req, res)=>{
    let currentUser = req.user.name
  
    mdb.movieInfo({ id: req.body.hidden}, (err, res) => {

    
  
      //henter info om personen du har matchet med
    sql = `SELECT email FROM user WHERE idUser = ?`;
    db.query(sql, [req.body.Hidden], function(err, results){
    //pga scope må eg enten flytte nodemailen inn her eller globalThis. men globalThis er vanligvis litt rotete
    var transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: 'seriesidenoreply@gmail.com',
          pass: 'DetteErEtPassord'
        }
      });
      if(err)
        {
            console.log ("error = " + err);
        }

//email adresse
      var mailOptions = {
        from: 'seriesidenoreply@gmail.com',
        to: results[0].email,
        subject: `${currentUser} vil se film med deg`,
        text: `Hei! ${currentUser} har lyst å se ${res.title} med deg:) Send din kontakt informasjon til ${req.user.email} for å ta kontakt!`
      };
      
      transporter.sendMail(mailOptions, function(error, info){
        if (error) {
          console.log(error);
        } else {
          console.log('Email sent: ' + info.response);
        }
      });
    })
    });
res.render("mailSent.ejs")
})

 /*

  Få mer en 19 filmer om gangen legge sammen for å sleppe å hardkode hver side
  Populere filmer     side 2
 
  mdb.discoverMovie({ page: 1 }, (err, result) => {
    mdb.discoverMovie({ page: 2 }, (err, res) => {
  
});
  });
*/


/*Løsning på "film tinder": Velge tilfeldig bilde fra populer sjangeren og ha med Serie ID som hidden i en knapp. Laste opp i DB  for å hente ut likte serier? hvis film id er lik hent bruker info fra DB og lag match til i db. Kommunikasjonsmuligheter? evnt lagre tlf(Kankje snap, facebook osv..?) eller displaye mail. Eller lage en chat functiion(Taaar laaaaang tid)*/ 



//porten som brukes til serveren
app.listen(3000)




/* bruk denne til å se om celler er like i et table. https://stackoverflow.com/questions/24347726/how-to-compare-cells-in-javascript-table-to-each-other-and-test-for-equality-ho*/